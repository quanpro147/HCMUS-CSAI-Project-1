"""
Run experiments on continuous optimization problems.
So s√°nh c√°c thu·∫≠t to√°n Swarm Intelligence vs Traditional tr√™n b√†i to√°n li√™n t·ª•c.
"""

import numpy as np
import json
import time
from datetime import datetime
from typing import List, Dict, Any
import os

# Import problems
from problems import (
    SphereFunction, 
    RastriginFunction, 
    RosenbrockFunction,
    AckleyFunction
)

# Import algorithms
from algorithms import FireflyAlgorithm
# from algorithms import PSO
# from algorithms import ABC
from algorithms import HillClimbing


class ContinuousExperiment:
    """
    Class ƒë·ªÉ ch·∫°y v√† qu·∫£n l√Ω experiments tr√™n continuous problems.
    """
    
    def __init__(self, 
                 algorithms: List,
                 problems: List,
                 n_runs: int = 30,
                 max_iter: int = 100,
                 results_dir: str = "results"):
        """
        Args:
            algorithms: Danh s√°ch c√°c thu·∫≠t to√°n c·∫ßn test
            problems: Danh s√°ch c√°c b√†i to√°n
            n_runs: S·ªë l·∫ßn ch·∫°y m·ªói thu·∫≠t to√°n tr√™n m·ªói b√†i to√°n
            max_iter: S·ªë iteration t·ªëi ƒëa
            results_dir: Th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£
        """
        self.algorithms = algorithms
        self.problems = problems
        self.n_runs = n_runs
        self.max_iter = max_iter
        self.results_dir = results_dir
        
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
        os.makedirs(results_dir, exist_ok=True)
        
        # L∆∞u k·∫øt qu·∫£
        self.results = {}
        
    def run_single_experiment(self, algorithm, problem, run_id: int) -> Dict[str, Any]:
        """
        Ch·∫°y 1 l·∫ßn experiment cho 1 thu·∫≠t to√°n tr√™n 1 b√†i to√°n.
        
        Returns:
            Dict ch·ª©a k·∫øt qu·∫£
        """
        print(f"    Run {run_id + 1}/{self.n_runs}...", end='')
        
        # Reset thu·∫≠t to√°n
        algorithm.reset()
        
        # Ch·∫°y
        result = algorithm.run(problem, max_iter=self.max_iter)
        
        print(f" fitness={result['fitness']:.6f}, time={result['execution_time']:.4f}s")
        
        return result
    
    def run_algorithm_on_problem(self, algorithm, problem) -> Dict[str, Any]:
        """
        Ch·∫°y 1 thu·∫≠t to√°n nhi·ªÅu l·∫ßn tr√™n 1 b√†i to√°n.
        
        Returns:
            Dict ch·ª©a t·∫•t c·∫£ k·∫øt qu·∫£ v√† statistics
        """
        print(f"\nTesting {algorithm.name} on {problem.prob_name}...")
        
        all_results = []
        
        for run_id in range(self.n_runs):
            result = self.run_single_experiment(algorithm, problem, run_id)
            all_results.append(result)
        
        # T√≠nh statistics
        fitness_values = [r['fitness'] for r in all_results]
        time_values = [r['execution_time'] for r in all_results]
        iterations_values = [r['iterations'] for r in all_results]
        evaluations_values = [r['function_evaluations'] for r in all_results]
        
        stats = {
            'algorithm': algorithm.name,
            'problem': problem.prob_name,
            'n_runs': self.n_runs,
            'max_iter': self.max_iter,
            
            # Fitness statistics
            'fitness': {
                'mean': float(np.mean(fitness_values)),
                'std': float(np.std(fitness_values)),
                'min': float(np.min(fitness_values)),
                'max': float(np.max(fitness_values)),
                'median': float(np.median(fitness_values)),
                'q25': float(np.percentile(fitness_values, 25)),
                'q75': float(np.percentile(fitness_values, 75)),
                'all_values': fitness_values
            },
            
            # Time statistics
            'time': {
                'mean': float(np.mean(time_values)),
                'std': float(np.std(time_values)),
                'min': float(np.min(time_values)),
                'max': float(np.max(time_values)),
                'all_values': time_values
            },
            
            # Other metrics
            'iterations': {
                'mean': float(np.mean(iterations_values))
            },
            'evaluations': {
                'mean': float(np.mean(evaluations_values))
            },
            
            # Convergence curves (l·∫•y t·ª´ run t·ªët nh·∫•t)
            'best_run_convergence': all_results[np.argmin(fitness_values)]['convergence_curve'],
            
            # Error from optimal
            'error_from_optimal': {
                'mean': float(np.mean(fitness_values) - problem.optimal_value),
                'min': float(np.min(fitness_values) - problem.optimal_value)
            }
        }
        
        return stats
    
    def run_all_experiments(self):
        """
        Ch·∫°y t·∫•t c·∫£ experiments: t·∫•t c·∫£ thu·∫≠t to√°n tr√™n t·∫•t c·∫£ b√†i to√°n.
        """
        print("RUNNING CONTINUOUS OPTIMIZATION EXPERIMENTS")
        print(f"Number of algorithms: {len(self.algorithms)}")
        print(f"Number of problems: {len(self.problems)}")
        print(f"Runs per experiment: {self.n_runs}")
        print(f"Max iterations: {self.max_iter}")
        
        start_time = time.time()
        
        # Ch·∫°y t·ª´ng problem
        for problem in self.problems:
            print(f"\nProblem: {problem.prob_name} (dim={problem.dim})")

            problem_results = {}
            
            # Ch·∫°y t·ª´ng thu·∫≠t to√°n
            for algorithm in self.algorithms:
                stats = self.run_algorithm_on_problem(algorithm, problem)
                problem_results[algorithm.name] = stats
            
            # L∆∞u k·∫øt qu·∫£
            self.results[problem.prob_name] = problem_results
        
        total_time = time.time() - start_time

        print(f"\nALL EXPERIMENTS COMPLETED!")
        print(f"Total time: {total_time:.2f} seconds ({total_time/60:.2f} minutes)")
    
    def run(self):
        """
        Method ch√≠nh ƒë·ªÉ ch·∫°y to√†n b·ªô workflow: run -> summary -> save.
        Ch·ªâ c·∫ßn g·ªçi method n√†y t·ª´ main.py
        """
        # 1. Ch·∫°y experiments
        self.run_all_experiments()
        
        # 2. In summary
        self.print_summary()
        
        # 3. L∆∞u k·∫øt qu·∫£
        filepath = self.save_results()
        
        return filepath
        
    def save_results(self, filename: str = None):
        """
        L∆∞u k·∫øt qu·∫£ ra file JSON.
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"results_{timestamp}.json"
        
        filepath = os.path.join(self.results_dir, filename)
        
        with open(filepath, 'w') as f:
            json.dump(self.results, f, indent=4)
        
        print(f"\nResults saved to: {filepath}")
        
        return filepath
    
    def print_summary(self):
        """
        In t√≥m t·∫Øt k·∫øt qu·∫£.
        """
        print("EXPERIMENT SUMMARY")
        
        for problem_name, problem_results in self.results.items():
            print(f"\n {problem_name}:")
            print(f"{'Algorithm':<25} {'Mean Fitness':<15} {'Std':<12} {'Best':<12} {'Time (s)':<10}")
            print("-"*80)
            
            # Sort by mean fitness
            sorted_results = sorted(
                problem_results.items(), 
                key=lambda x: x[1]['fitness']['mean']
            )
            
            for algo_name, stats in sorted_results:
                print(f"{algo_name:<25} "
                      f"{stats['fitness']['mean']:<15.6f} "
                      f"{stats['fitness']['std']:<12.6f} "
                      f"{stats['fitness']['min']:<12.6f} "
                      f"{stats['time']['mean']:<10.4f}")
            
            # Best algorithm
            best_algo = sorted_results[0][0]
            best_fitness = sorted_results[0][1]['fitness']['mean']
            print(f"\n  üèÜ Best: {best_algo} (fitness={best_fitness:.6f})")


def main():
    """
    Main function ƒë·ªÉ ch·∫°y experiments.
    """
    
    # 1. ƒê·ªãnh nghƒ©a c√°c b√†i to√°n
    print("Setting up problems...")
    problems = [
        SphereFunction(dim=10),
        RastriginFunction(dim=10),
        # RosenbrockFunction(dim=10),
        # AckleyFunction(dim=10),
    ]
    
    # 2. ƒê·ªãnh nghƒ©a c√°c thu·∫≠t to√°n
    print("Setting up algorithms...")
    algorithms = [
        FireflyAlgorithm(population_size=30, beta0=1.0, gamma=1.0, alpha=0.2),
        # PSO(population_size=30, w=0.7, c1=1.5, c2=1.5),
        # ABC(n_bees=40),
        HillClimbing(step_size=0.1),
    ]
    
    # 3. T·∫°o experiment
    experiment = ContinuousExperiment(
        algorithms=algorithms,
        problems=problems,
        n_runs=10, 
        max_iter=100
    )
    
    # 4. Ch·∫°y experiments
    experiment.run_all_experiments()
    
    # 5. In t√≥m t·∫Øt
    experiment.print_summary()
    
    # 6. L∆∞u k·∫øt qu·∫£
    experiment.save_results()


if __name__ == "__main__":
    main()
